import express from 'express';
import http from 'http';
import cors from 'cors';

const app = express();
const server = http.createServer(app);

// ุฅุนุฏุงุฏุงุช ุงูุจูุฆุฉ
const PORT = process.env.PORT || 3000;

// ูุณุงุฆุท middleware ุงูุฃุณุงุณูุฉ
app.use(cors());
app.use(express.json());

// ุจูุงูุงุช ุงููุณุชุฎุฏููู ุงููุฎุฒูุฉ ูู ุงูุฐุงูุฑุฉ
const users = [
    {
        _id: 'admin-001',
        fullName: 'ูุฏูุฑ ุงููุธุงู',
        phone: '500000000',
        university: 'ุงูููุตุฉ ุงูุชุนููููุฉ',
        major: 'ุฅุฏุงุฑุฉ ุงููุธุงู',
        batch: '2024',
        password: '77007700',
        role: 'admin',
        isOnline: false,
        isActive: true,
        createdAt: new Date().toISOString()
    },
    {
        _id: 'user-001',
        fullName: 'ุฃุญูุฏ ูุญูุฏ',
        phone: '512345678',
        university: 'ุฌุงูุนุฉ ุงูููู ุณุนูุฏ',
        major: 'ููุฏุณุฉ ุงูุญุงุณุจ',
        batch: '2024',
        password: '12345678',
        role: 'student',
        isOnline: false,
        isActive: true,
        createdAt: new Date().toISOString()
    }
];

// ==================== ูุณุงุฑุงุช API ====================

// ูุณุงุฑ ุฑุฆูุณู
app.get('/', (req, res) => {
    res.json({
        success: true,
        message: '๐ ุฎุงุฏู ุงูููุตุฉ ุงูุชุนููููุฉ ูุนูู ุจูุฌุงุญ!',
        version: '1.0.0',
        timestamp: new Date().toISOString(),
        usersCount: users.length
    });
});

// ุชุณุฌูู ุงูุฏุฎูู ุงููุจุณุท ุฌุฏุงู
app.post('/api/auth/login', (req, res) => {
    try {
        console.log('๐ ุทูุจ ุชุณุฌูู ุงูุฏุฎูู received:', req.body);
        
        const { phone, password } = req.body;

        // ุชุณุฌูู ุชูุงุตูู ุงูุทูุจ
        console.log('๐ ุจูุงูุงุช ุงูุฅุฏุฎุงู:', { 
            phone, 
            password: password ? '***' : 'ุบูุฑ ููุฌูุฏ',
            bodyKeys: Object.keys(req.body)
        });

        // ุงูุชุญูู ูู ุงูุจูุงูุงุช
        if (!phone || !password) {
            console.log('โ ุจูุงูุงุช ูุงูุตุฉ:', { phone: !!phone, password: !!password });
            return res.status(400).json({
                success: false,
                message: 'ุฑูู ุงููุงุชู ููููุฉ ุงููุฑูุฑ ูุทููุจุงู',
                provided: { phone: !!phone, password: !!password }
            });
        }

        // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู
        console.log('๐ ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู:', phone);
        const user = users.find(u => u.phone === phone && u.isActive);
        
        if (!user) {
            console.log('โ ูุณุชุฎุฏู ุบูุฑ ููุฌูุฏ:', phone);
            console.log('๐ ุงููุณุชุฎุฏููู ุงููุชุงุญูู:', users.map(u => u.phone));
            return res.status(401).json({
                success: false,
                message: 'ุฑูู ุงููุงุชู ุบูุฑ ูุณุฌู',
                availableUsers: users.map(u => u.phone)
            });
        }

        console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุงููุณุชุฎุฏู:', user.fullName);
        console.log('๐ ููุงุฑูุฉ ูููุงุช ุงููุฑูุฑ:', {
            stored: user.password,
            provided: password,
            match: user.password === password
        });

        // ููุงุฑูุฉ ูููุฉ ุงููุฑูุฑ ูุจุงุดุฑุฉ
        if (user.password !== password) {
            console.log('โ ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ');
            return res.status(401).json({
                success: false,
                message: 'ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ'
            });
        }

        // ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู
        user.isOnline = true;
        user.lastSeen = new Date().toISOString();

        console.log('โ ุชุณุฌูู ุงูุฏุฎูู ูุงุฌุญ:', user.fullName);

        // ุฅุฑุฌุงุน ุงูุจูุงูุงุช ุจุฏูู ูููุฉ ุงููุฑูุฑ
        const { password: _, ...userWithoutPassword } = user;

        res.json({
            success: true,
            message: 'ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ',
            data: {
                user: userWithoutPassword,
                token: 'simple-token-' + user._id
            }
        });

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error);
        console.error('ุชูุงุตูู ุงูุฎุทุฃ:', error.stack);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู: ' + error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
app.post('/api/auth/register', (req, res) => {
    try {
        console.log('๐ ุทูุจ ุชุณุฌูู ุฌุฏูุฏ:', req.body);
        
        const { fullName, phone, university, major, batch, password } = req.body;

        // ุงูุชุญูู ูู ุงูุจูุงูุงุช
        if (!fullName || !phone || !university || !major || !batch || !password) {
            return res.status(400).json({
                success: false,
                message: 'ุฌููุน ุงูุญููู ูุทููุจุฉ'
            });
        }

        // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ูุณุชุฎุฏู ุจููุณ ุงูุฑูู
        const existingUser = users.find(u => u.phone === phone);
        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: 'ุฑูู ุงููุงุชู ูุณุฌู ูุณุจูุงู'
            });
        }

        // ุฅูุดุงุก ุงููุณุชุฎุฏู
        const newUser = {
            _id: 'user-' + Date.now(),
            fullName: fullName.trim(),
            phone,
            university,
            major,
            batch,
            password: password,
            role: 'student',
            isOnline: true,
            isActive: true,
            createdAt: new Date().toISOString()
        };

        users.push(newUser);

        // ุฅุฑุฌุงุน ุงูุจูุงูุงุช ุจุฏูู ูููุฉ ุงููุฑูุฑ
        const { password: _, ...userWithoutPassword } = newUser;

        res.status(201).json({
            success: true,
            message: 'ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ',
            data: {
                user: userWithoutPassword,
                token: 'simple-token-' + newUser._id
            }
        });

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุชุณุฌูู:', error);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู: ' + error.message
        });
    }
});

// ุงูุชุญูู ูู ุงููุณุชุฎุฏู
app.get('/api/auth/me', (req, res) => {
    try {
        const token = req.headers.authorization;
        console.log('๐ ุทูุจ ุงูุชุญูู:', { token });
        
        if (!token) {
            return res.status(401).json({
                success: false,
                message: 'ุงูุชููู ูุทููุจ'
            });
        }

        // ุงุณุชุฎุฑุงุฌ ID ูู ุงูุชููู ุงูุจุณูุท
        const userId = token.replace('simple-token-', '');
        const user = users.find(u => u._id === userId);
        
        if (!user) {
            return res.status(401).json({
                success: false,
                message: 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ'
            });
        }

        const { password: _, ...userWithoutPassword } = user;

        res.json({
            success: true,
            data: {
                user: userWithoutPassword
            }
        });

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุชุญูู:', error);
        res.status(401).json({
            success: false,
            message: 'ุงูุชููู ุบูุฑ ุตุงูุญ'
        });
    }
});

// ูุณุงุฑุงุช ุจุณูุทุฉ ููุจูุงูุงุช
app.get('/api/stories', (req, res) => {
    res.json({
        success: true,
        data: {
            stories: []
        }
    });
});

app.get('/api/conversations', (req, res) => {
    res.json({
        success: true,
        data: {
            conversations: []
        }
    });
});

app.get('/api/backup/list', (req, res) => {
    res.json({
        success: true,
        data: {
            backups: []
        }
    });
});

// ูุณุงุฑ ุงูุตุญุฉ
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        message: 'ุงูุฎุงุฏู ูุนูู ุจุดูู ุทุจูุนู',
        timestamp: new Date().toISOString(),
        usersCount: users.length
    });
});

// ูุนุงูุฌุฉ ุงููุณุงุฑุงุช ุบูุฑ ุงูููุฌูุฏุฉ
app.use('*', (req, res) => {
    console.log('โ ูุณุงุฑ ุบูุฑ ููุฌูุฏ:', req.originalUrl);
    res.status(404).json({
        success: false,
        message: 'ุงููุณุงุฑ ุบูุฑ ููุฌูุฏ',
        path: req.originalUrl
    });
});

// ุจุฏุก ุงูุฎุงุฏู
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
๐ ุฎุงุฏู ุงูููุตุฉ ุงูุชุนููููุฉ ูุนูู ุจูุฌุงุญ!
๐ ุงููููุฐ: ${PORT}
โฐ ุงูููุช: ${new Date().toLocaleString('ar-SA')}

๐ ุญุณุงุจุงุช ุงูุงุฎุชุจุงุฑ ุงููุชุงุญุฉ:
   ๐ ุงููุฏูุฑ: 500000000 / 77007700
   ๐จโ๐ ุฃุญูุฏ: 512345678 / 12345678

๐ ุฅุญุตุงุฆูุงุช:
   ๐ฅ ุนุฏุฏ ุงููุณุชุฎุฏููู: ${users.length}
   ๐ ุงูุจูุฆุฉ: ${process.env.NODE_ENV || 'development'}

๐ก ุณุฌูู ุงูุฏุฎูู ุงูุขู ูุฌุฑุจ!
    `);
});

export default app;
